### Exploration of Fundamental Factors based on Chinese A stocks market
import pandas as pd
import numpy as np
import akshare as ak
import requests
import seaborn as sns
from bs4 import BeautifulSoup
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LassoCV
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

import matplotlib.pyplot as plt

## 1. Grabbing the fundamental data of stocks. This is just an example, the real operation depends on the website's structure
stock_list = ["600030", "001979", "000737", "600171", "002155"]
base_url = "http://quote.eastmoney.com/concept/{code}.html"

def get_stock_data(stock_code):
    url = base_url.format(code=stock_code)
    headers = { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        print(f"Failed to fetch data for {stock_code}")
        return None
    
    soup = BeautifulSoup(response.text, "html.parser")

    # Analyzing the fundamental data
    try:
        data = {
            "Stock Code": stock_code,
            "Name": soup.find("div", class_="stock-name").text.strip() if soup.find("div", class_="stock-name") else None,
            "PE": float(soup.find("span", class_="pe-ratio").text.strip()) if soup.find("span", class_="pe-ratio") else np.nan,
            "PB": float(soup.find("span", class_="pb-ratio").text.strip()) if soup.find("span", class_="pb-ratio") else np.nan,
            "ROE": float(soup.find("span", class_="roe-ratio").text.strip()) if soup.find("span", class_="roe-ratio") else np.nan,
            "ROA": float(soup.find("span", class_="roa-ratio").text.strip()) if soup.find("span", class_="roa-ratio") else np.nan,
            "DebtRatio": float(soup.find("span", class_="debt-ratio").text.strip()) if soup.find("span", class_="debt-ratio") else np.nan,
            "DividendYield": float(soup.find("span", class_="dividend-yield").text.strip()) if soup.find("span", class_="dividend-yield") else np.nan,
            "FutureReturn": float(soup.find("span", class_="future-return").text.strip()) if soup.find("span", class_="future-return") else np.nan
        }
    except Exception as e:
        print(f"Error parsing data for {stock_code}: {e}")
        return None
    return data

# Grabing data of all stocks mentioned
stock_data = [get_stock_data(code) for code in stock_list]

# Delete the data with problems
stock_data = [data for data in stock_data if data is not None]
if not stock_data:
   raise ValueError("No valid stock data fetched. Exiting.")
data = pd.DataFrame(stock_data)

## 2. Data Preprocessing
features = ['PE', 'PB', 'ROE', 'ROA', 'DebtRatio', 'DividendYield']
if all(feature in data.columns for feature in features) and 'FutureReturn' in data.columns:
   X = data[features]
   y = data['FutureReturn']
else:
   raise ValueError("Missing necessary columns in data")

# Handling missing values (using mean imputation) 
X.fillna(X.mean(), inplace=True)

# Standardization
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

## 3. Employing Lasso to filtrating factors
lasso = LassoCV(cv=5, random_state=42).fit(X_scaled, y)
selected_features = np.array(features)[lasso.coef_!= 0]
print("Filtrating the crucial factors:", selected_features)

## 4. Calculating the factors' scores and perform group backtesting
factor_scores = X_scaled @ lasso.coef_
data['FactorScore'] = factor_scores
if data['FactorScore'].nunique() > 1:
    data['Group'] = pd.qcut(data['FactorScore'], 3, labels=['Low', 'Medium', 'High'])
else:
    data['Group'] = 'Medium'

mean_returns = data.groupby('Group')['FutureReturn'].mean()

## 5. Visualization
if not mean_returns.empty:
   plt.figure(figsize=(10, 6))
   mean_returns.plot(kind='bar', color=['red', 'blue', 'green'])
   plt.title("A-share Fundamental Factor Grouped Returns")
   plt.ylabel("Average Future Return")
   plt.xlabel("Factor Score Group")
   plt.show()
else:
   print("No data available for plotting.")


